// Import the RegisterInput type from the register page component
import { RegisterInput } from "../../pages/register.page";
// Import the customFetchBase utility function
import customFetchBase from "./customFetchBase";
// Import the createApi and fetchBaseQuery functions from Redux Toolkit
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";
// Import the GenericResponse type
import { GenericResponse } from "./types";

// Get the base URL for the backend server from the environment variables
const BASE_URL = process.env.REACT_APP_BACKEND_SERVER_ENDPOINT as string;

// Define the authentication API using Redux Toolkit
export const authApi = createApi({
  reducerPath: "authApi", // The path in the Redux store for this API
  baseQuery: customFetchBase, // The base query to use for requests
  endpoints: (builder) => ({
    // Define the registerUser mutation
    registerUser: builder.mutation<GenericResponse, RegisterInput>({
      query(data) {
        console.log("Performed");
        return {
          url: "auth/register", // The URL for the register endpoint
          method: "POST", // The HTTP method to use for the request
          body: data, // The data to send in the request body
        };
      },
    }),
    // Define the verifyEmail mutation
    verifyEmail: builder.mutation<GenericResponse, string>({
      query() {
        return {
          url: "auth/verifyemail", // The URL for the verify email endpoint
          credentials: "include", // Include cookies in the request
        };
      },
    }),
  }),
});

// Export the custom hooks generated by Redux Toolkit for the defined mutations
export const { useRegisterUserMutation, useVerifyEmailMutation } = authApi;

// This code defines an authentication API using the Redux Toolkit Query library. It includes two mutations: registerUser and verifyEmail. The registerUser mutation sends a POST request to the /auth/register endpoint, while the verifyEmail mutation sends a GET request to the /auth/verifyemail endpoint. The custom hooks useRegisterUserMutation and useVerifyEmailMutation are generated by the Redux Toolkit Query library and exported for use in other parts of the application.
